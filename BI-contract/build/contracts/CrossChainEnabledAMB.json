{
  "contractName": "CrossChainEnabledAMB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"details\":\"https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH \\u21cc xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH \\u21cc qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH \\u21cc ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH \\u21cc BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH \\u21cc POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC \\u21cc xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA \\u21cc xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby \\u21cc xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan \\u21cc Sokol] _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor\"}},\"stateVariables\":{\"_bridge\":{\"custom:oz-upgrades-unsafe-allow\":\"state-variable-immutable\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":\"CrossChainEnabledAMB\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0xe3796f669986f88c231262fc454399c7068123d59c6d2721b3e8807e1b5490e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://01dae8a0bedc02610d1eb581a1114ed87afc5f6c0de59b4ffa91fb3d30fc94a7\",\"dweb:/ipfs/QmTEs6tt5TUBxQKnFw4uNPn7ZE59uz3E2hhVKCnKvpzwPh\"]},\"project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol\":{\"keccak256\":\"0x42b1609e36ac87d6229a13404bee22a808613fcc70c6e842f5b77aa7d8d5fa44\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1e61650728fd1d9ca2290640d1ef3aa8ca364b7a67101eacddb8aae2acae8429\",\"dweb:/ipfs/QmSkKEKFYRboVKENYHswoeXsNecTwVYFbAw9ka3rrPY3sL\"]},\"project:/contracts/crosschain/amb/LibAMB.sol\":{\"keccak256\":\"0x4286b9007b0dba2b7f2125cfa2d975e8afc000f95e8a6335e93490c513ebacc7\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://68c9ae8ebd13565779f3fad2bf05e38a379161b8cc3f1c8899339b2d0edbbed1\",\"dweb:/ipfs/QmQXc6WWPx934QbspccDY4GG4jnUgNUbiJ74YpwnaA36cH\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/vendor/amb/IAMB.sol\":{\"keccak256\":\"0x6465aca00eb1dcb80e8c1ee25dab810bce5471c462fc279adfcecfdbb860a42a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://e15f5eeafc82ad37c41f863b61755c39e969040f903578e5fb756e633c198b00\",\"dweb:/ipfs/QmS8JWfzvepeNmb8pu6LpWVLwmWBDZTGLUZxxZKeMWLRXh\"]}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161015738038061015783398181016040528101906100329190610084565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050506100ff565b60008151905061007e816100e8565b92915050565b60006020828403121561009a576100996100e3565b5b60006100a88482850161006f565b91505092915050565b60006100bc826100c3565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600080fd5b6100f1816100b1565b81146100fc57600080fd5b50565b60805160601c603f61011860003960005050603f6000f3fe6080604052600080fdfea26469706673582212203d9e465c681ceef1862ef819488bfc237746b2f1b77370d3096efe630645047964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600080fdfea26469706673582212203d9e465c681ceef1862ef819488bfc237746b2f1b77370d3096efe630645047964736f6c63430008070033",
  "immutableReferences": {},
  "generatedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:1199:169",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "70:80:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "80:22:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "offset",
                        "nodeType": "YulIdentifier",
                        "src": "95:6:169"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "89:5:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "89:13:169"
                  },
                  "variableNames": [
                    {
                      "name": "value",
                      "nodeType": "YulIdentifier",
                      "src": "80:5:169"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "138:5:169"
                      }
                    ],
                    "functionName": {
                      "name": "validator_revert_t_address",
                      "nodeType": "YulIdentifier",
                      "src": "111:26:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "111:33:169"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "111:33:169"
                }
              ]
            },
            "name": "abi_decode_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "offset",
                "nodeType": "YulTypedName",
                "src": "48:6:169",
                "type": ""
              },
              {
                "name": "end",
                "nodeType": "YulTypedName",
                "src": "56:3:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "64:5:169",
                "type": ""
              }
            ],
            "src": "7:143:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "233:274:169",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "279:83:169",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [],
                          "functionName": {
                            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
                            "nodeType": "YulIdentifier",
                            "src": "281:77:169"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "281:79:169"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "281:79:169"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "254:7:169"
                          },
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "263:9:169"
                          }
                        ],
                        "functionName": {
                          "name": "sub",
                          "nodeType": "YulIdentifier",
                          "src": "250:3:169"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "250:23:169"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "275:2:169",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "slt",
                      "nodeType": "YulIdentifier",
                      "src": "246:3:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "246:32:169"
                  },
                  "nodeType": "YulIf",
                  "src": "243:119:169"
                },
                {
                  "nodeType": "YulBlock",
                  "src": "372:128:169",
                  "statements": [
                    {
                      "nodeType": "YulVariableDeclaration",
                      "src": "387:15:169",
                      "value": {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "401:1:169",
                        "type": "",
                        "value": "0"
                      },
                      "variables": [
                        {
                          "name": "offset",
                          "nodeType": "YulTypedName",
                          "src": "391:6:169",
                          "type": ""
                        }
                      ]
                    },
                    {
                      "nodeType": "YulAssignment",
                      "src": "416:74:169",
                      "value": {
                        "arguments": [
                          {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "462:9:169"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "473:6:169"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "458:3:169"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "458:22:169"
                          },
                          {
                            "name": "dataEnd",
                            "nodeType": "YulIdentifier",
                            "src": "482:7:169"
                          }
                        ],
                        "functionName": {
                          "name": "abi_decode_t_address_fromMemory",
                          "nodeType": "YulIdentifier",
                          "src": "426:31:169"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "426:64:169"
                      },
                      "variableNames": [
                        {
                          "name": "value0",
                          "nodeType": "YulIdentifier",
                          "src": "416:6:169"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "name": "abi_decode_tuple_t_address_fromMemory",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "203:9:169",
                "type": ""
              },
              {
                "name": "dataEnd",
                "nodeType": "YulTypedName",
                "src": "214:7:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "226:6:169",
                "type": ""
              }
            ],
            "src": "156:351:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "553:35:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "563:19:169",
                  "value": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "579:2:169",
                        "type": "",
                        "value": "64"
                      }
                    ],
                    "functionName": {
                      "name": "mload",
                      "nodeType": "YulIdentifier",
                      "src": "573:5:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "573:9:169"
                  },
                  "variableNames": [
                    {
                      "name": "memPtr",
                      "nodeType": "YulIdentifier",
                      "src": "563:6:169"
                    }
                  ]
                }
              ]
            },
            "name": "allocate_unbounded",
            "nodeType": "YulFunctionDefinition",
            "returnVariables": [
              {
                "name": "memPtr",
                "nodeType": "YulTypedName",
                "src": "546:6:169",
                "type": ""
              }
            ],
            "src": "513:75:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "639:51:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "649:35:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "678:5:169"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "660:17:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "660:24:169"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "649:7:169"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "621:5:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "631:7:169",
                "type": ""
              }
            ],
            "src": "594:96:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "741:81:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "751:65:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "766:5:169"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "773:42:169",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "762:3:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "762:54:169"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "751:7:169"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "723:5:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "733:7:169",
                "type": ""
              }
            ],
            "src": "696:126:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "917:28:169",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "934:1:169",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "937:1:169",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "927:6:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "927:12:169"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "927:12:169"
                }
              ]
            },
            "name": "revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db",
            "nodeType": "YulFunctionDefinition",
            "src": "828:117:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1040:28:169",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1057:1:169",
                        "type": "",
                        "value": "0"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "1060:1:169",
                        "type": "",
                        "value": "0"
                      }
                    ],
                    "functionName": {
                      "name": "revert",
                      "nodeType": "YulIdentifier",
                      "src": "1050:6:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1050:12:169"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "1050:12:169"
                }
              ]
            },
            "name": "revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b",
            "nodeType": "YulFunctionDefinition",
            "src": "951:117:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "1117:79:169",
              "statements": [
                {
                  "body": {
                    "nodeType": "YulBlock",
                    "src": "1174:16:169",
                    "statements": [
                      {
                        "expression": {
                          "arguments": [
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1183:1:169",
                              "type": "",
                              "value": "0"
                            },
                            {
                              "kind": "number",
                              "nodeType": "YulLiteral",
                              "src": "1186:1:169",
                              "type": "",
                              "value": "0"
                            }
                          ],
                          "functionName": {
                            "name": "revert",
                            "nodeType": "YulIdentifier",
                            "src": "1176:6:169"
                          },
                          "nodeType": "YulFunctionCall",
                          "src": "1176:12:169"
                        },
                        "nodeType": "YulExpressionStatement",
                        "src": "1176:12:169"
                      }
                    ]
                  },
                  "condition": {
                    "arguments": [
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1140:5:169"
                          },
                          {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "1165:5:169"
                              }
                            ],
                            "functionName": {
                              "name": "cleanup_t_address",
                              "nodeType": "YulIdentifier",
                              "src": "1147:17:169"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1147:24:169"
                          }
                        ],
                        "functionName": {
                          "name": "eq",
                          "nodeType": "YulIdentifier",
                          "src": "1137:2:169"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "1137:35:169"
                      }
                    ],
                    "functionName": {
                      "name": "iszero",
                      "nodeType": "YulIdentifier",
                      "src": "1130:6:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "1130:43:169"
                  },
                  "nodeType": "YulIf",
                  "src": "1127:63:169"
                }
              ]
            },
            "name": "validator_revert_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "1110:5:169",
                "type": ""
              }
            ],
            "src": "1074:122:169"
          }
        ]
      },
      "contents": "{\n\n    function abi_decode_t_address_fromMemory(offset, end) -> value {\n        value := mload(offset)\n        validator_revert_t_address(value)\n    }\n\n    function abi_decode_tuple_t_address_fromMemory(headStart, dataEnd) -> value0 {\n        if slt(sub(dataEnd, headStart), 32) { revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() }\n\n        {\n\n            let offset := 0\n\n            value0 := abi_decode_t_address_fromMemory(add(headStart, offset), dataEnd)\n        }\n\n    }\n\n    function allocate_unbounded() -> memPtr {\n        memPtr := mload(64)\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n    function revert_error_c1322bf8034eace5e0b5c7295db60986aa89aae5e0ea0873e4689e076861a5db() {\n        revert(0, 0)\n    }\n\n    function revert_error_dbdddcbe895c83990c08b3492a0e83918d802a52331272ac6fdb6a7c4aea3b1b() {\n        revert(0, 0)\n    }\n\n    function validator_revert_t_address(value) {\n        if iszero(eq(value, cleanup_t_address(value))) { revert(0, 0) }\n    }\n\n}\n",
      "id": 169,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "deployedGeneratedSources": [],
  "sourceMap": "1291:721:10:-:0;;;1512:63;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1561:6;1551:16;;;;;;;;;;;;1512:63;1291:721;;7:143:169;64:5;95:6;89:13;80:22;;111:33;138:5;111:33;:::i;:::-;7:143;;;;:::o;156:351::-;226:6;275:2;263:9;254:7;250:23;246:32;243:119;;;281:79;;:::i;:::-;243:119;401:1;426:64;482:7;473:6;462:9;458:22;426:64;:::i;:::-;416:74;;372:128;156:351;;;;:::o;594:96::-;631:7;660:24;678:5;660:24;:::i;:::-;649:35;;594:96;;;:::o;696:126::-;733:7;773:42;766:5;762:54;751:65;;696:126;;;:::o;951:117::-;1060:1;1057;1050:12;1074:122;1147:24;1165:5;1147:24;:::i;:::-;1140:5;1137:35;1127:63;;1186:1;1183;1176:12;1127:63;1074:122;:::o;1291:721:10:-;;;;;;;;;;;;;",
  "deployedSourceMap": "1291:721:10:-:0;;;;;",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/amb/CrossChainEnabledAMB.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"../CrossChainEnabled.sol\";\r\nimport \"./LibAMB.sol\";\r\n\r\n/**\r\n * @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\r\n * specialization or the {CrossChainEnabled} abstraction.\r\n *\r\n * As of february 2020, AMB bridges are available between the following chains:\r\n *\r\n * - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\r\n * - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\r\n * - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\r\n * - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\r\n * - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\r\n * - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\r\n * - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\r\n * - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\r\n * - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\r\n *\r\n * _Available since v4.6._\r\n */\r\ncontract CrossChainEnabledAMB is CrossChainEnabled {\r\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable\r\n    address private immutable _bridge;\r\n\r\n    /// @custom:oz-upgrades-unsafe-allow constructor\r\n    constructor(address bridge) {\r\n        _bridge = bridge;\r\n    }\r\n\r\n    /**\r\n     * @dev see {CrossChainEnabled-_isCrossChain}\r\n     */\r\n    function _isCrossChain() internal view virtual override returns (bool) {\r\n        return LibAMB.isCrossChain(_bridge);\r\n    }\r\n\r\n    /**\r\n     * @dev see {CrossChainEnabled-_crossChainSender}\r\n     */\r\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\r\n        return LibAMB.crossChainSender(_bridge);\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Kshitij\\UBSem2\\CSE 526 - Blockchain\\Project\\Phase3\\MarketPlaceBlockchain\\BI-contract\\contracts\\crosschain\\amb\\CrossChainEnabledAMB.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/amb/CrossChainEnabledAMB.sol",
    "exportedSymbols": {
      "AMB_Bridge": [
        24024
      ],
      "CrossChainEnabled": [
        1287
      ],
      "CrossChainEnabledAMB": [
        1337
      ],
      "InvalidCrossChainSender": [
        1601
      ],
      "LibAMB": [
        1381
      ],
      "NotCrossChainCall": [
        1595
      ]
    },
    "id": 1338,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1289,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "126:23:10"
      },
      {
        "absolutePath": "project:/contracts/crosschain/CrossChainEnabled.sol",
        "file": "../CrossChainEnabled.sol",
        "id": 1290,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1338,
        "sourceUnit": 1288,
        "src": "153:34:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/amb/LibAMB.sol",
        "file": "./LibAMB.sol",
        "id": 1291,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1338,
        "sourceUnit": 1382,
        "src": "189:22:10",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [
          {
            "baseName": {
              "id": 1293,
              "name": "CrossChainEnabled",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1287,
              "src": "1324:17:10"
            },
            "id": 1294,
            "nodeType": "InheritanceSpecifier",
            "src": "1324:17:10"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1292,
          "nodeType": "StructuredDocumentation",
          "src": "215:1074:10",
          "text": " @dev https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB]\n specialization or the {CrossChainEnabled} abstraction.\n As of february 2020, AMB bridges are available between the following chains:\n - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai]\n - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai]\n - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC]\n - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC]\n - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA]\n - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai]\n - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai]\n - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai]\n - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol]\n _Available since v4.6._"
        },
        "fullyImplemented": true,
        "id": 1337,
        "linearizedBaseContracts": [
          1337,
          1287
        ],
        "name": "CrossChainEnabledAMB",
        "nameLocation": "1300:20:10",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": false,
            "documentation": {
              "id": 1295,
              "nodeType": "StructuredDocumentation",
              "src": "1349:61:10",
              "text": "@custom:oz-upgrades-unsafe-allow state-variable-immutable"
            },
            "id": 1297,
            "mutability": "immutable",
            "name": "_bridge",
            "nameLocation": "1442:7:10",
            "nodeType": "VariableDeclaration",
            "scope": 1337,
            "src": "1416:33:10",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1296,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1416:7:10",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "private"
          },
          {
            "body": {
              "id": 1307,
              "nodeType": "Block",
              "src": "1540:35:10",
              "statements": [
                {
                  "expression": {
                    "id": 1305,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 1303,
                      "name": "_bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1297,
                      "src": "1551:7:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 1304,
                      "name": "bridge",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1300,
                      "src": "1561:6:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1551:16:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 1306,
                  "nodeType": "ExpressionStatement",
                  "src": "1551:16:10"
                }
              ]
            },
            "documentation": {
              "id": 1298,
              "nodeType": "StructuredDocumentation",
              "src": "1458:48:10",
              "text": "@custom:oz-upgrades-unsafe-allow constructor"
            },
            "id": 1308,
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1301,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1300,
                  "mutability": "mutable",
                  "name": "bridge",
                  "nameLocation": "1532:6:10",
                  "nodeType": "VariableDeclaration",
                  "scope": 1308,
                  "src": "1524:14:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1299,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1524:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1523:16:10"
            },
            "returnParameters": {
              "id": 1302,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1540:0:10"
            },
            "scope": 1337,
            "src": "1512:63:10",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "public"
          },
          {
            "baseFunctions": [
              1280
            ],
            "body": {
              "id": 1320,
              "nodeType": "Block",
              "src": "1723:54:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1317,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1297,
                        "src": "1761:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1315,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1381,
                        "src": "1741:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1381_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 1316,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isCrossChain",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1357,
                      "src": "1741:19:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1318,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1741:28:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1314,
                  "id": 1319,
                  "nodeType": "Return",
                  "src": "1734:35:10"
                }
              ]
            },
            "documentation": {
              "id": 1309,
              "nodeType": "StructuredDocumentation",
              "src": "1583:63:10",
              "text": " @dev see {CrossChainEnabled-_isCrossChain}"
            },
            "id": 1321,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "1661:13:10",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1311,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1699:8:10"
            },
            "parameters": {
              "id": 1310,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1674:2:10"
            },
            "returnParameters": {
              "id": 1314,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1313,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1321,
                  "src": "1717:4:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1312,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "1717:4:10",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1716:6:10"
            },
            "scope": 1337,
            "src": "1652:125:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1286
            ],
            "body": {
              "id": 1335,
              "nodeType": "Block",
              "src": "1951:58:10",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "id": 1332,
                        "name": "_bridge",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1297,
                        "src": "1993:7:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1330,
                        "name": "LibAMB",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1381,
                        "src": "1969:6:10",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibAMB_$1381_$",
                          "typeString": "type(library LibAMB)"
                        }
                      },
                      "id": 1331,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "crossChainSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1380,
                      "src": "1969:23:10",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view returns (address)"
                      }
                    },
                    "id": 1333,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1969:32:10",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1329,
                  "id": 1334,
                  "nodeType": "Return",
                  "src": "1962:39:10"
                }
              ]
            },
            "documentation": {
              "id": 1322,
              "nodeType": "StructuredDocumentation",
              "src": "1785:67:10",
              "text": " @dev see {CrossChainEnabled-_crossChainSender}"
            },
            "id": 1336,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1326,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1325,
                  "name": "onlyCrossChain",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1253,
                  "src": "1918:14:10"
                },
                "nodeType": "ModifierInvocation",
                "src": "1918:14:10"
              }
            ],
            "name": "_crossChainSender",
            "nameLocation": "1867:17:10",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1324,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1909:8:10"
            },
            "parameters": {
              "id": 1323,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1884:2:10"
            },
            "returnParameters": {
              "id": 1329,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1328,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1336,
                  "src": "1942:7:10",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1327,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1942:7:10",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1941:9:10"
            },
            "scope": 1337,
            "src": "1858:151:10",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1338,
        "src": "1291:721:10",
        "usedErrors": []
      }
    ],
    "src": "126:1888:10"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-08T19:09:20.573Z",
  "devdoc": {
    "details": "https://docs.tokenbridge.net/amb-bridge/about-amb-bridge[AMB] specialization or the {CrossChainEnabled} abstraction. As of february 2020, AMB bridges are available between the following chains: - https://docs.tokenbridge.net/eth-xdai-amb-bridge/about-the-eth-xdai-amb[ETH ⇌ xDai] - https://docs.tokenbridge.net/eth-qdai-bridge/about-the-eth-qdai-amb[ETH ⇌ qDai] - https://docs.tokenbridge.net/eth-etc-amb-bridge/about-the-eth-etc-amb[ETH ⇌ ETC] - https://docs.tokenbridge.net/eth-bsc-amb/about-the-eth-bsc-amb[ETH ⇌ BSC] - https://docs.tokenbridge.net/eth-poa-amb-bridge/about-the-eth-poa-amb[ETH ⇌ POA] - https://docs.tokenbridge.net/bsc-xdai-amb/about-the-bsc-xdai-amb[BSC ⇌ xDai] - https://docs.tokenbridge.net/poa-xdai-amb/about-the-poa-xdai-amb[POA ⇌ xDai] - https://docs.tokenbridge.net/rinkeby-xdai-amb-bridge/about-the-rinkeby-xdai-amb[Rinkeby ⇌ xDai] - https://docs.tokenbridge.net/kovan-sokol-amb-bridge/about-the-kovan-sokol-amb[Kovan ⇌ Sokol] _Available since v4.6._",
    "kind": "dev",
    "methods": {
      "constructor": {
        "custom:oz-upgrades-unsafe-allow": "constructor"
      }
    },
    "stateVariables": {
      "_bridge": {
        "custom:oz-upgrades-unsafe-allow": "state-variable-immutable"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}