{
  "contractName": "LibArbitrumL2",
  "abi": [
    {
      "inputs": [],
      "name": "ARBSYS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"ARBSYS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Primitives for cross-chain aware contracts for https://arbitrum.io/[Arbitrum]. This version should only be used on L2 to process cross-chain messages originating from L1. For the other side, use {LibArbitrumL1}.\",\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"ARBSYS\":{\"details\":\"Returns whether the current function call is the result of a cross-chain message relayed by `arbsys`.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol\":\"LibArbitrumL2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol\":{\"keccak256\":\"0x630557841523912e37d3c1b9344586b01b233d39b2798d49190e377c34921590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aad7d50a0e3bfcd5b5cf5fc4d63b1fe9d5b240e377412bec696e73720159199\",\"dweb:/ipfs/QmUYsuW3H6xbTYY3kgwUA6hgZUiEqmtryogEyE6R8seaS4\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/vendor/arbitrum/IArbSys.sol\":{\"keccak256\":\"0x57c82523bcec7e5803a61bb378df06470060b11a753225829b243d600b4c1c97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5f0a85f5d36413e929fd8edba367160ddc7bd8b3671e5e564fe167443807c73\",\"dweb:/ipfs/QmXin1zuaMpT7GuMAxs3oeEj9zKpz6P5XSosg5w4DCstdc\"]}},\"version\":1}",
  "bytecode": "0x60e3610052600b82828239805160001a607314610045577f4e487b7100000000000000000000000000000000000000000000000000000000600052600060045260246000fd5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603e6052565b604051604991906064565b60405180910390f35b606481565b605e81607d565b82525050565b6000602082019050607760008301846057565b92915050565b6000608682608d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fea26469706673582212205368f719938a220242a886e4a1971711f05ac57080b37b5a76d7bf675994a8c164736f6c63430008070033",
  "deployedBytecode": "0x730000000000000000000000000000000000000000301460806040526004361060335760003560e01c8063bf0a12cf146038575b600080fd5b603e6052565b604051604991906064565b60405180910390f35b606481565b605e81607d565b82525050565b6000602082019050607760008301846057565b92915050565b6000608682608d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff8216905091905056fea26469706673582212205368f719938a220242a886e4a1971711f05ac57080b37b5a76d7bf675994a8c164736f6c63430008070033",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [
    {
      "ast": {
        "nodeType": "YulBlock",
        "src": "0:614:169",
        "statements": [
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "80:53:169",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "pos",
                        "nodeType": "YulIdentifier",
                        "src": "97:3:169"
                      },
                      {
                        "arguments": [
                          {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "120:5:169"
                          }
                        ],
                        "functionName": {
                          "name": "cleanup_t_address",
                          "nodeType": "YulIdentifier",
                          "src": "102:17:169"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "102:24:169"
                      }
                    ],
                    "functionName": {
                      "name": "mstore",
                      "nodeType": "YulIdentifier",
                      "src": "90:6:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "90:37:169"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "90:37:169"
                }
              ]
            },
            "name": "abi_encode_t_address_to_t_address_fromStack_library",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "68:5:169",
                "type": ""
              },
              {
                "name": "pos",
                "nodeType": "YulTypedName",
                "src": "75:3:169",
                "type": ""
              }
            ],
            "src": "7:126:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "245:132:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "255:26:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "headStart",
                        "nodeType": "YulIdentifier",
                        "src": "267:9:169"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "278:2:169",
                        "type": "",
                        "value": "32"
                      }
                    ],
                    "functionName": {
                      "name": "add",
                      "nodeType": "YulIdentifier",
                      "src": "263:3:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "263:18:169"
                  },
                  "variableNames": [
                    {
                      "name": "tail",
                      "nodeType": "YulIdentifier",
                      "src": "255:4:169"
                    }
                  ]
                },
                {
                  "expression": {
                    "arguments": [
                      {
                        "name": "value0",
                        "nodeType": "YulIdentifier",
                        "src": "343:6:169"
                      },
                      {
                        "arguments": [
                          {
                            "name": "headStart",
                            "nodeType": "YulIdentifier",
                            "src": "356:9:169"
                          },
                          {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "367:1:169",
                            "type": "",
                            "value": "0"
                          }
                        ],
                        "functionName": {
                          "name": "add",
                          "nodeType": "YulIdentifier",
                          "src": "352:3:169"
                        },
                        "nodeType": "YulFunctionCall",
                        "src": "352:17:169"
                      }
                    ],
                    "functionName": {
                      "name": "abi_encode_t_address_to_t_address_fromStack_library",
                      "nodeType": "YulIdentifier",
                      "src": "291:51:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "291:79:169"
                  },
                  "nodeType": "YulExpressionStatement",
                  "src": "291:79:169"
                }
              ]
            },
            "name": "abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "headStart",
                "nodeType": "YulTypedName",
                "src": "217:9:169",
                "type": ""
              },
              {
                "name": "value0",
                "nodeType": "YulTypedName",
                "src": "229:6:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "tail",
                "nodeType": "YulTypedName",
                "src": "240:4:169",
                "type": ""
              }
            ],
            "src": "139:238:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "428:51:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "438:35:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "467:5:169"
                      }
                    ],
                    "functionName": {
                      "name": "cleanup_t_uint160",
                      "nodeType": "YulIdentifier",
                      "src": "449:17:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "449:24:169"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "438:7:169"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_address",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "410:5:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "420:7:169",
                "type": ""
              }
            ],
            "src": "383:96:169"
          },
          {
            "body": {
              "nodeType": "YulBlock",
              "src": "530:81:169",
              "statements": [
                {
                  "nodeType": "YulAssignment",
                  "src": "540:65:169",
                  "value": {
                    "arguments": [
                      {
                        "name": "value",
                        "nodeType": "YulIdentifier",
                        "src": "555:5:169"
                      },
                      {
                        "kind": "number",
                        "nodeType": "YulLiteral",
                        "src": "562:42:169",
                        "type": "",
                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                      }
                    ],
                    "functionName": {
                      "name": "and",
                      "nodeType": "YulIdentifier",
                      "src": "551:3:169"
                    },
                    "nodeType": "YulFunctionCall",
                    "src": "551:54:169"
                  },
                  "variableNames": [
                    {
                      "name": "cleaned",
                      "nodeType": "YulIdentifier",
                      "src": "540:7:169"
                    }
                  ]
                }
              ]
            },
            "name": "cleanup_t_uint160",
            "nodeType": "YulFunctionDefinition",
            "parameters": [
              {
                "name": "value",
                "nodeType": "YulTypedName",
                "src": "512:5:169",
                "type": ""
              }
            ],
            "returnVariables": [
              {
                "name": "cleaned",
                "nodeType": "YulTypedName",
                "src": "522:7:169",
                "type": ""
              }
            ],
            "src": "485:126:169"
          }
        ]
      },
      "contents": "{\n\n    function abi_encode_t_address_to_t_address_fromStack_library(value, pos) {\n        mstore(pos, cleanup_t_address(value))\n    }\n\n    function abi_encode_tuple_t_address__to_t_address__fromStack_library_reversed(headStart , value0) -> tail {\n        tail := add(headStart, 32)\n\n        abi_encode_t_address_to_t_address_fromStack_library(value0,  add(headStart, 0))\n\n    }\n\n    function cleanup_t_address(value) -> cleaned {\n        cleaned := cleanup_t_uint160(value)\n    }\n\n    function cleanup_t_uint160(value) -> cleaned {\n        cleaned := and(value, 0xffffffffffffffffffffffffffffffffffffffff)\n    }\n\n}\n",
      "id": 169,
      "language": "Yul",
      "name": "#utility.yul"
    }
  ],
  "sourceMap": "506:1104:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;",
  "deployedSourceMap": "506:1104:15:-:0;;;;;;;;;;;;;;;;;;;;;;;;676:75;;;:::i;:::-;;;;;;;:::i;:::-;;;;;;;;;709:42;676:75;:::o;7:126:169:-;102:24;120:5;102:24;:::i;:::-;97:3;90:37;7:126;;:::o;139:238::-;240:4;278:2;267:9;263:18;255:26;;291:79;367:1;356:9;352:17;343:6;291:79;:::i;:::-;139:238;;;;:::o;383:96::-;420:7;449:24;467:5;449:24;:::i;:::-;438:35;;383:96;;;:::o;485:126::-;522:7;562:42;555:5;551:54;540:65;;485:126;;;:::o",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/LibArbitrumL2.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport {IArbSys as ArbitrumL2_Bridge} from \"../../vendor/arbitrum/IArbSys.sol\";\r\nimport \"../errors.sol\";\r\n\r\n/**\r\n * @dev Primitives for cross-chain aware contracts for\r\n * https://arbitrum.io/[Arbitrum].\r\n *\r\n * This version should only be used on L2 to process cross-chain messages\r\n * originating from L1. For the other side, use {LibArbitrumL1}.\r\n */\r\nlibrary LibArbitrumL2 {\r\n    /**\r\n     * @dev Returns whether the current function call is the result of a\r\n     * cross-chain message relayed by `arbsys`.\r\n     */\r\n    address public constant ARBSYS = 0x0000000000000000000000000000000000000064;\r\n\r\n    function isCrossChain(address arbsys) internal view returns (bool) {\r\n        return ArbitrumL2_Bridge(arbsys).isTopLevelCall();\r\n    }\r\n\r\n    /**\r\n     * @dev Returns the address of the sender that triggered the current\r\n     * cross-chain message through `arbsys`.\r\n     *\r\n     * NOTE: {isCrossChain} should be checked before trying to recover the\r\n     * sender, as it will revert with `NotCrossChainCall` if the current\r\n     * function call is not the result of a cross-chain message.\r\n     */\r\n    function crossChainSender(address arbsys) internal view returns (address) {\r\n        if (!isCrossChain(arbsys)) revert NotCrossChainCall();\r\n\r\n        return\r\n            ArbitrumL2_Bridge(arbsys).wasMyCallersAddressAliased()\r\n                ? ArbitrumL2_Bridge(arbsys).myCallersAddressWithoutAliasing()\r\n                : msg.sender;\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Kshitij\\UBSem2\\CSE 526 - Blockchain\\Project\\Phase3\\MarketPlaceBlockchain\\BI-contract\\contracts\\crosschain\\arbitrum\\LibArbitrumL2.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol",
    "exportedSymbols": {
      "ArbitrumL2_Bridge": [
        24137
      ],
      "InvalidCrossChainSender": [
        1601
      ],
      "LibArbitrumL2": [
        1591
      ],
      "NotCrossChainCall": [
        1595
      ]
    },
    "id": 1592,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1537,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "124:23:15"
      },
      {
        "absolutePath": "project:/contracts/vendor/arbitrum/IArbSys.sol",
        "file": "../../vendor/arbitrum/IArbSys.sol",
        "id": 1539,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1592,
        "sourceUnit": 24138,
        "src": "151:79:15",
        "symbolAliases": [
          {
            "foreign": {
              "id": 1538,
              "name": "IArbSys",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "src": "159:7:15",
              "typeDescriptions": {}
            },
            "local": "ArbitrumL2_Bridge",
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/errors.sol",
        "file": "../errors.sol",
        "id": 1540,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1592,
        "sourceUnit": 1602,
        "src": "232:23:15",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "contractDependencies": [],
        "contractKind": "library",
        "documentation": {
          "id": 1541,
          "nodeType": "StructuredDocumentation",
          "src": "259:245:15",
          "text": " @dev Primitives for cross-chain aware contracts for\n https://arbitrum.io/[Arbitrum].\n This version should only be used on L2 to process cross-chain messages\n originating from L1. For the other side, use {LibArbitrumL1}."
        },
        "fullyImplemented": true,
        "id": 1591,
        "linearizedBaseContracts": [
          1591
        ],
        "name": "LibArbitrumL2",
        "nameLocation": "514:13:15",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "constant": true,
            "documentation": {
              "id": 1542,
              "nodeType": "StructuredDocumentation",
              "src": "535:135:15",
              "text": " @dev Returns whether the current function call is the result of a\n cross-chain message relayed by `arbsys`."
            },
            "functionSelector": "bf0a12cf",
            "id": 1545,
            "mutability": "constant",
            "name": "ARBSYS",
            "nameLocation": "700:6:15",
            "nodeType": "VariableDeclaration",
            "scope": 1591,
            "src": "676:75:15",
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 1543,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "676:7:15",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "value": {
              "hexValue": "307830303030303030303030303030303030303030303030303030303030303030303030303030303634",
              "id": 1544,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "709:42:15",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              },
              "value": "0x0000000000000000000000000000000000000064"
            },
            "visibility": "public"
          },
          {
            "body": {
              "id": 1558,
              "nodeType": "Block",
              "src": "827:68:15",
              "statements": [
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "expression": {
                        "arguments": [
                          {
                            "id": 1553,
                            "name": "arbsys",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1547,
                            "src": "863:6:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1552,
                          "name": "ArbitrumL2_Bridge",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24137,
                          "src": "845:17:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_IArbSys_$24137_$",
                            "typeString": "type(contract IArbSys)"
                          }
                        },
                        "id": 1554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "845:25:15",
                        "tryCall": false,
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_IArbSys_$24137",
                          "typeString": "contract IArbSys"
                        }
                      },
                      "id": 1555,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isTopLevelCall",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 24086,
                      "src": "845:40:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                        "typeString": "function () view external returns (bool)"
                      }
                    },
                    "id": 1556,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "845:42:15",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1551,
                  "id": 1557,
                  "nodeType": "Return",
                  "src": "838:49:15"
                }
              ]
            },
            "id": 1559,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "isCrossChain",
            "nameLocation": "769:12:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1548,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1547,
                  "mutability": "mutable",
                  "name": "arbsys",
                  "nameLocation": "790:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 1559,
                  "src": "782:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1546,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "782:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "781:16:15"
            },
            "returnParameters": {
              "id": 1551,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1550,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1559,
                  "src": "821:4:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1549,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "821:4:15",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "820:6:15"
            },
            "scope": 1591,
            "src": "760:135:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "body": {
              "id": 1589,
              "nodeType": "Block",
              "src": "1339:268:15",
              "statements": [
                {
                  "condition": {
                    "id": 1570,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "UnaryOperation",
                    "operator": "!",
                    "prefix": true,
                    "src": "1354:21:15",
                    "subExpression": {
                      "arguments": [
                        {
                          "id": 1568,
                          "name": "arbsys",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1562,
                          "src": "1368:6:15",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        ],
                        "id": 1567,
                        "name": "isCrossChain",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1559,
                        "src": "1355:12:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                          "typeString": "function (address) view returns (bool)"
                        }
                      },
                      "id": 1569,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1355:20:15",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "id": 1574,
                  "nodeType": "IfStatement",
                  "src": "1350:53:15",
                  "trueBody": {
                    "errorCall": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "id": 1571,
                        "name": "NotCrossChainCall",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1595,
                        "src": "1384:17:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_error_pure$__$returns$__$",
                          "typeString": "function () pure"
                        }
                      },
                      "id": 1572,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1384:19:15",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_tuple$__$",
                        "typeString": "tuple()"
                      }
                    },
                    "id": 1573,
                    "nodeType": "RevertStatement",
                    "src": "1377:26:15"
                  }
                },
                {
                  "expression": {
                    "condition": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "arguments": [
                            {
                              "id": 1576,
                              "name": "arbsys",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1562,
                              "src": "1454:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1575,
                            "name": "ArbitrumL2_Bridge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24137,
                            "src": "1436:17:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IArbSys_$24137_$",
                              "typeString": "type(contract IArbSys)"
                            }
                          },
                          "id": 1577,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1436:25:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IArbSys_$24137",
                            "typeString": "contract IArbSys"
                          }
                        },
                        "id": 1578,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "wasMyCallersAddressAliased",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 24092,
                        "src": "1436:52:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_bool_$",
                          "typeString": "function () view external returns (bool)"
                        }
                      },
                      "id": 1579,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1436:54:15",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      }
                    },
                    "falseExpression": {
                      "expression": {
                        "id": 1585,
                        "name": "msg",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 4294967281,
                        "src": "1589:3:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_magic_message",
                          "typeString": "msg"
                        }
                      },
                      "id": 1586,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "sender",
                      "nodeType": "MemberAccess",
                      "src": "1589:10:15",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 1587,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "nodeType": "Conditional",
                    "src": "1436:163:15",
                    "trueExpression": {
                      "arguments": [],
                      "expression": {
                        "argumentTypes": [],
                        "expression": {
                          "arguments": [
                            {
                              "id": 1581,
                              "name": "arbsys",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1562,
                              "src": "1528:6:15",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1580,
                            "name": "ArbitrumL2_Bridge",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 24137,
                            "src": "1510:17:15",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_IArbSys_$24137_$",
                              "typeString": "type(contract IArbSys)"
                            }
                          },
                          "id": 1582,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1510:25:15",
                          "tryCall": false,
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IArbSys_$24137",
                            "typeString": "contract IArbSys"
                          }
                        },
                        "id": 1583,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "myCallersAddressWithoutAliasing",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 24098,
                        "src": "1510:57:15",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_external_view$__$returns$_t_address_$",
                          "typeString": "function () view external returns (address)"
                        }
                      },
                      "id": 1584,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1510:59:15",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1566,
                  "id": 1588,
                  "nodeType": "Return",
                  "src": "1416:183:15"
                }
              ]
            },
            "documentation": {
              "id": 1560,
              "nodeType": "StructuredDocumentation",
              "src": "903:356:15",
              "text": " @dev Returns the address of the sender that triggered the current\n cross-chain message through `arbsys`.\n NOTE: {isCrossChain} should be checked before trying to recover the\n sender, as it will revert with `NotCrossChainCall` if the current\n function call is not the result of a cross-chain message."
            },
            "id": 1590,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "crossChainSender",
            "nameLocation": "1274:16:15",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 1563,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1562,
                  "mutability": "mutable",
                  "name": "arbsys",
                  "nameLocation": "1299:6:15",
                  "nodeType": "VariableDeclaration",
                  "scope": 1590,
                  "src": "1291:14:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1561,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1291:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1290:16:15"
            },
            "returnParameters": {
              "id": 1566,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1565,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1590,
                  "src": "1330:7:15",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1564,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1330:7:15",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1329:9:15"
            },
            "scope": 1591,
            "src": "1265:342:15",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "internal"
          }
        ],
        "scope": 1592,
        "src": "506:1104:15",
        "usedErrors": []
      }
    ],
    "src": "124:1488:15"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-08T19:09:20.579Z",
  "devdoc": {
    "details": "Primitives for cross-chain aware contracts for https://arbitrum.io/[Arbitrum]. This version should only be used on L2 to process cross-chain messages originating from L1. For the other side, use {LibArbitrumL1}.",
    "kind": "dev",
    "methods": {},
    "stateVariables": {
      "ARBSYS": {
        "details": "Returns whether the current function call is the result of a cross-chain message relayed by `arbsys`."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}