{
  "contractName": "CrossChainEnabledArbitrumL2",
  "abi": [],
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"https://arbitrum.io/[Arbitrum] specialization or the {CrossChainEnabled} abstraction the L2 side (arbitrum). This version should only be deployed on L2 to process cross-chain messages originating from L1. For the other side, use {CrossChainEnabledArbitrumL1}. Arbitrum L2 includes the `ArbSys` contract at a fixed address. Therefore, this specialization of {CrossChainEnabled} does not include a constructor. _Available since v4.6._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol\":\"CrossChainEnabledArbitrumL2\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"project:/contracts/crosschain/CrossChainEnabled.sol\":{\"keccak256\":\"0xe3796f669986f88c231262fc454399c7068123d59c6d2721b3e8807e1b5490e4\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://01dae8a0bedc02610d1eb581a1114ed87afc5f6c0de59b4ffa91fb3d30fc94a7\",\"dweb:/ipfs/QmTEs6tt5TUBxQKnFw4uNPn7ZE59uz3E2hhVKCnKvpzwPh\"]},\"project:/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol\":{\"keccak256\":\"0x4f1a8410b42707bf2617615dcad65e482e5795d8c824c6618ba8846966166f27\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://92e4faeb98a80e8613c74c36a5a5743ecbe143dd3d30c6043f82e2c6e27bd2ad\",\"dweb:/ipfs/QmUiAd7VednbhkhXkyVP8fNtabgHdXceR6s8HWE8XuApAq\"]},\"project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol\":{\"keccak256\":\"0x630557841523912e37d3c1b9344586b01b233d39b2798d49190e377c34921590\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://1aad7d50a0e3bfcd5b5cf5fc4d63b1fe9d5b240e377412bec696e73720159199\",\"dweb:/ipfs/QmUYsuW3H6xbTYY3kgwUA6hgZUiEqmtryogEyE6R8seaS4\"]},\"project:/contracts/crosschain/errors.sol\":{\"keccak256\":\"0x9d3ffe3bc59c2dac36d93cb4641ffeaa98b96cce588d106efe050a0b67b4d902\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://bf8c1e49412c6975de84fe2c72f6785f139d36843aaa623bc9964003748b3757\",\"dweb:/ipfs/QmcDPdSYsWHGnMZB6yHH8Tczr16QVjd8TjPcMVDdyvPV1W\"]},\"project:/contracts/vendor/arbitrum/IArbSys.sol\":{\"keccak256\":\"0x57c82523bcec7e5803a61bb378df06470060b11a753225829b243d600b4c1c97\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c5f0a85f5d36413e929fd8edba367160ddc7bd8b3671e5e564fe167443807c73\",\"dweb:/ipfs/QmXin1zuaMpT7GuMAxs3oeEj9zKpz6P5XSosg5w4DCstdc\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: MIT\r\n// OpenZeppelin Contracts (last updated v4.6.0) (crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol)\r\n\r\npragma solidity ^0.8.4;\r\n\r\nimport \"../CrossChainEnabled.sol\";\r\nimport \"./LibArbitrumL2.sol\";\r\n\r\n/**\r\n * @dev https://arbitrum.io/[Arbitrum] specialization or the\r\n * {CrossChainEnabled} abstraction the L2 side (arbitrum).\r\n *\r\n * This version should only be deployed on L2 to process cross-chain messages\r\n * originating from L1. For the other side, use {CrossChainEnabledArbitrumL1}.\r\n *\r\n * Arbitrum L2 includes the `ArbSys` contract at a fixed address. Therefore,\r\n * this specialization of {CrossChainEnabled} does not include a constructor.\r\n *\r\n * _Available since v4.6._\r\n */\r\nabstract contract CrossChainEnabledArbitrumL2 is CrossChainEnabled {\r\n    /**\r\n     * @dev see {CrossChainEnabled-_isCrossChain}\r\n     */\r\n    function _isCrossChain() internal view virtual override returns (bool) {\r\n        return LibArbitrumL2.isCrossChain(LibArbitrumL2.ARBSYS);\r\n    }\r\n\r\n    /**\r\n     * @dev see {CrossChainEnabled-_crossChainSender}\r\n     */\r\n    function _crossChainSender() internal view virtual override onlyCrossChain returns (address) {\r\n        return LibArbitrumL2.crossChainSender(LibArbitrumL2.ARBSYS);\r\n    }\r\n}\r\n",
  "sourcePath": "C:\\Kshitij\\UBSem2\\CSE 526 - Blockchain\\Project\\Phase3\\MarketPlaceBlockchain\\BI-contract\\contracts\\crosschain\\arbitrum\\CrossChainEnabledArbitrumL2.sol",
  "ast": {
    "absolutePath": "project:/contracts/crosschain/arbitrum/CrossChainEnabledArbitrumL2.sol",
    "exportedSymbols": {
      "ArbitrumL2_Bridge": [
        24137
      ],
      "CrossChainEnabled": [
        1287
      ],
      "CrossChainEnabledArbitrumL2": [
        1469
      ],
      "InvalidCrossChainSender": [
        1601
      ],
      "LibArbitrumL2": [
        1591
      ],
      "NotCrossChainCall": [
        1595
      ]
    },
    "id": 1470,
    "license": "MIT",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 1433,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".4"
        ],
        "nodeType": "PragmaDirective",
        "src": "138:23:13"
      },
      {
        "absolutePath": "project:/contracts/crosschain/CrossChainEnabled.sol",
        "file": "../CrossChainEnabled.sol",
        "id": 1434,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1470,
        "sourceUnit": 1288,
        "src": "165:34:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/crosschain/arbitrum/LibArbitrumL2.sol",
        "file": "./LibArbitrumL2.sol",
        "id": 1435,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 1470,
        "sourceUnit": 1592,
        "src": "201:29:13",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 1437,
              "name": "CrossChainEnabled",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 1287,
              "src": "771:17:13"
            },
            "id": 1438,
            "nodeType": "InheritanceSpecifier",
            "src": "771:17:13"
          }
        ],
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 1436,
          "nodeType": "StructuredDocumentation",
          "src": "234:486:13",
          "text": " @dev https://arbitrum.io/[Arbitrum] specialization or the\n {CrossChainEnabled} abstraction the L2 side (arbitrum).\n This version should only be deployed on L2 to process cross-chain messages\n originating from L1. For the other side, use {CrossChainEnabledArbitrumL1}.\n Arbitrum L2 includes the `ArbSys` contract at a fixed address. Therefore,\n this specialization of {CrossChainEnabled} does not include a constructor.\n _Available since v4.6._"
        },
        "fullyImplemented": true,
        "id": 1469,
        "linearizedBaseContracts": [
          1469,
          1287
        ],
        "name": "CrossChainEnabledArbitrumL2",
        "nameLocation": "740:27:13",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "baseFunctions": [
              1280
            ],
            "body": {
              "id": 1451,
              "nodeType": "Block",
              "src": "936:74:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1447,
                          "name": "LibArbitrumL2",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1591,
                          "src": "981:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_LibArbitrumL2_$1591_$",
                            "typeString": "type(library LibArbitrumL2)"
                          }
                        },
                        "id": 1448,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "ARBSYS",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1545,
                        "src": "981:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1445,
                        "name": "LibArbitrumL2",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1591,
                        "src": "954:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibArbitrumL2_$1591_$",
                          "typeString": "type(library LibArbitrumL2)"
                        }
                      },
                      "id": 1446,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "isCrossChain",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1559,
                      "src": "954:26:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_bool_$",
                        "typeString": "function (address) view returns (bool)"
                      }
                    },
                    "id": 1449,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "954:48:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "functionReturnParameters": 1444,
                  "id": 1450,
                  "nodeType": "Return",
                  "src": "947:55:13"
                }
              ]
            },
            "documentation": {
              "id": 1439,
              "nodeType": "StructuredDocumentation",
              "src": "796:63:13",
              "text": " @dev see {CrossChainEnabled-_isCrossChain}"
            },
            "id": 1452,
            "implemented": true,
            "kind": "function",
            "modifiers": [],
            "name": "_isCrossChain",
            "nameLocation": "874:13:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1441,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "912:8:13"
            },
            "parameters": {
              "id": 1440,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "887:2:13"
            },
            "returnParameters": {
              "id": 1444,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1443,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1452,
                  "src": "930:4:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 1442,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "930:4:13",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "929:6:13"
            },
            "scope": 1469,
            "src": "865:145:13",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          },
          {
            "baseFunctions": [
              1286
            ],
            "body": {
              "id": 1467,
              "nodeType": "Block",
              "src": "1184:78:13",
              "statements": [
                {
                  "expression": {
                    "arguments": [
                      {
                        "expression": {
                          "id": 1463,
                          "name": "LibArbitrumL2",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1591,
                          "src": "1233:13:13",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_contract$_LibArbitrumL2_$1591_$",
                            "typeString": "type(library LibArbitrumL2)"
                          }
                        },
                        "id": 1464,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "ARBSYS",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 1545,
                        "src": "1233:20:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "expression": {
                      "argumentTypes": [
                        {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      ],
                      "expression": {
                        "id": 1461,
                        "name": "LibArbitrumL2",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1591,
                        "src": "1202:13:13",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_contract$_LibArbitrumL2_$1591_$",
                          "typeString": "type(library LibArbitrumL2)"
                        }
                      },
                      "id": 1462,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "lValueRequested": false,
                      "memberName": "crossChainSender",
                      "nodeType": "MemberAccess",
                      "referencedDeclaration": 1590,
                      "src": "1202:30:13",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_view$_t_address_$returns$_t_address_$",
                        "typeString": "function (address) view returns (address)"
                      }
                    },
                    "id": 1465,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1202:52:13",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "functionReturnParameters": 1460,
                  "id": 1466,
                  "nodeType": "Return",
                  "src": "1195:59:13"
                }
              ]
            },
            "documentation": {
              "id": 1453,
              "nodeType": "StructuredDocumentation",
              "src": "1018:67:13",
              "text": " @dev see {CrossChainEnabled-_crossChainSender}"
            },
            "id": 1468,
            "implemented": true,
            "kind": "function",
            "modifiers": [
              {
                "id": 1457,
                "kind": "modifierInvocation",
                "modifierName": {
                  "id": 1456,
                  "name": "onlyCrossChain",
                  "nodeType": "IdentifierPath",
                  "referencedDeclaration": 1253,
                  "src": "1151:14:13"
                },
                "nodeType": "ModifierInvocation",
                "src": "1151:14:13"
              }
            ],
            "name": "_crossChainSender",
            "nameLocation": "1100:17:13",
            "nodeType": "FunctionDefinition",
            "overrides": {
              "id": 1455,
              "nodeType": "OverrideSpecifier",
              "overrides": [],
              "src": "1142:8:13"
            },
            "parameters": {
              "id": 1454,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1117:2:13"
            },
            "returnParameters": {
              "id": 1460,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 1459,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 1468,
                  "src": "1175:7:13",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 1458,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1175:7:13",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1174:9:13"
            },
            "scope": 1469,
            "src": "1091:171:13",
            "stateMutability": "view",
            "virtual": true,
            "visibility": "internal"
          }
        ],
        "scope": 1470,
        "src": "722:543:13",
        "usedErrors": []
      }
    ],
    "src": "138:1129:13"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.7+commit.e28d00a7.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.7",
  "updatedAt": "2022-05-08T19:09:20.577Z",
  "devdoc": {
    "details": "https://arbitrum.io/[Arbitrum] specialization or the {CrossChainEnabled} abstraction the L2 side (arbitrum). This version should only be deployed on L2 to process cross-chain messages originating from L1. For the other side, use {CrossChainEnabledArbitrumL1}. Arbitrum L2 includes the `ArbSys` contract at a fixed address. Therefore, this specialization of {CrossChainEnabled} does not include a constructor. _Available since v4.6._",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  }
}